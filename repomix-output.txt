This file is a merged representation of the entire codebase, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
authorization-policy.yaml
deployment-egress-gw.yaml
deployment-workload.yaml
destintionrule.yaml
gateway.yaml
namespaces.yaml
README.md
serviceentry.yaml
sidecar.yaml
virtualservice-egress-gw.yaml
virtualservice-workload.yaml

================================================================
Files
================================================================

================
File: authorization-policy.yaml
================
apiVersion: security.istio.io/v1
kind: AuthorizationPolicy
metadata:
  name: allow-curl-external-to-egress
  namespace: curl-egress-tst
spec:
  selector:
    matchLabels:
      istio: egressgateway
  action: ALLOW
  rules:
  - from:
    - source:
        namespaces:
        - curl-external-tst

================
File: deployment-egress-gw.yaml
================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: curl-egress-tst
  namespace: curl-egress-tst
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curl-egress-tst-gateway
  namespace: curl-egress-tst
  labels:
    istio: egressgateway
spec:
  replicas: 1
  selector:
    matchLabels:
      istio: egressgateway
  template:
    metadata:
      labels:
        istio: egressgateway
      annotations:
        sidecar.istio.io/inject: "true"
        inject.istio.io/templates: "gateway"
        prometheus.io/path: "/stats/prometheus"
        prometheus.io/port: "15020"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: curl-egress-tst
      containers:
      - name: istio-proxy
        image: gcr.io/gke-release/asm/proxyv2:1.19.10-asm.26
        ports:
        - containerPort: 80
          name: http
        - containerPort: 15090
          name: http-envoy-prom
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          privileged: false
          readOnlyRootFilesystem: true
          runAsGroup: 1337
          runAsNonRoot: true
          runAsUser: 1337
        readinessProbe:
          httpGet:
            path: /healthz/ready
            port: 15021
            scheme: HTTP
          initialDelaySeconds: 1
          periodSeconds: 2
          successThreshold: 1
          failureThreshold: 30
          timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: curl-egress-tst
  namespace: curl-egress-tst
  labels:
    istio: egressgateway
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: 80
  selector:
    istio: egressgateway

================
File: deployment-workload.yaml
================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: curl-test
  namespace: curl-external-tst
  labels:
    app: curl-test
spec:
  replicas: 1
  selector:
    matchLabels:
      app: curl-test
  template:
    metadata:
      labels:
        app: curl-test
      annotations:
        # Ensure Istio sidecar injection
        sidecar.istio.io/inject: "true"
    spec:
      containers:
      - name: curl-container
        image: curlimages/curl:latest
        command: ["/bin/sh"]
        args:
        - -c
        - |
          while true; do
            curl -s http://jsonplaceholder.typicode.com/todos/1 -v
            sleep 5
          done
        resources:
          limits:
            cpu: "200m"
            memory: "256Mi"
          requests:
            cpu: "100m"
            memory: "128Mi"

================
File: destintionrule.yaml
================
apiVersion: networking.istio.io/v1alpha3
kind: DestinationRule
metadata:
  name: jsonplaceholder-tls-origination
  namespace: curl-egress-tst
spec:
  host: jsonplaceholder.typicode.com
  trafficPolicy:
    tls:
      mode: SIMPLE #TLS origination
      sni: jsonplaceholder.typicode.com

================
File: gateway.yaml
================
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: egress-gateway
  namespace: curl-egress-tst
spec:
  selector:
    istio: egressgateway
  servers:
  - port:
      number: 80
      name: http
      protocol: HTTP
    hosts:
    - "jsonplaceholder.typicode.com"

================
File: namespaces.yaml
================
apiVersion: v1
kind: Namespace
metadata:
  name: curl-external-tst
  labels:
    kubernetes.io/metadata.name: curl-external-tst
    istio.io/rev: asm-managed-stable
  annotations:
    argocd.argoproj.io/instance: root-application
---
apiVersion: v1
kind: Namespace
metadata:
  name: curl-egress-tst
  labels:
    kubernetes.io/metadata.name: curl-egress-tst
    istio.io/rev: asm-managed-stable
  annotations:
    argocd.argoproj.io/instance: root-application

================
File: README.md
================
# Istio Egress Gateway Proof of Concept

This repository contains a proof of concept (PoC) demonstrating how to configure an Istio service mesh to handle outbound HTTP traffic from a workload, route it through an egress gateway, and secure it with mutual TLS (mTLS) using SPIFFE identities. The setup includes namespaces, deployments, Istio configurations, and optional sidecar restrictions to enforce traffic routing through the service mesh.

![Egress Gateway Diagram](gdx-external-https-diagram.png)

## Overview

The PoC originates an HTTP call from a source workload pod in the `curl-external-tst` namespace, which is intercepted by the Istio sidecar proxy (Envoy). The traffic is then routed through an egress gateway in the `curl-egress-tst` namespace, where it is encrypted with mTLS, forwarded to an external service (`jsonplaceholder.typicode.com`), and processed. The configuration ensures secure communication and controlled egress traffic using Istio’s service mesh capabilities.

### Key Components

- **Namespaces**: Two namespaces (`curl-external-tst` for the workload, `curl-egress-tst` for the egress gateway).
- **Workload**: A `curl-test` deployment that generates HTTP requests to `jsonplaceholder.typicode.com`.
- **Egress Gateway**: A dedicated gateway deployment (`curl-egress-tst-gateway`) to handle outbound traffic.
- **Istio Configurations**: `ServiceEntry`, `VirtualService`, `DestinationRule`, `Gateway`, and an optional `Sidecar` resource to enforce mesh routing.
- **Authorization**: An `AuthorizationPolicy` to allow traffic from the workload namespace to the egress gateway.

## Resource Interactions

1. **Source Workload (`deployment-workload.yaml`)**:
   - A `curl-test` pod in the `curl-external-tst` namespace runs a container that continuously sends HTTP requests to `http://jsonplaceholder.typicode.com/todos/1`.
   - The pod is injected with an Istio sidecar proxy (`istio-proxy`) due to the `sidecar.istio.io/inject: "true"` annotation.

2. **Istio Sidecar Proxy (Source)**:
   - The sidecar intercepts the outbound HTTP request from the `curl-test` container.
   - Based on the `VirtualService` (`virtualservice-workload.yaml`), the traffic is redirected to the egress gateway service (`curl-egress-tst.curl-egress-tst.svc.cluster.local`) on port 80.
   - The `ServiceEntry` (`serviceentry.yaml`) defines the external host (`jsonplaceholder.typicode.com`) as part of the mesh, allowing Istio to manage it.
   - The sidecar encrypts the HTTP payload into a TCP stream using mTLS with SPIFFE identities and forwards it to the egress gateway.

3. **Egress Gateway (`deployment-egress-gw.yaml`)**:
   - The egress gateway deployment (`curl-egress-tst-gateway`) in the `curl-egress-tst` namespace receives the encrypted TCP stream.
   - The gateway’s Istio proxy decrypts the mTLS stream, inspects the original HTTP request, and applies Envoy filters.
   - The `Gateway` (`gateway.yaml`) and `VirtualService` (`virtualservice-egress-gw.yaml`) configure the gateway to forward the request to `jsonplaceholder.typicode.com` on port 443 with TLS origination (defined in `destintionrule.yaml`).

4. **TLS Origination (`destintionrule.yaml`)**:
   - The `DestinationRule` specifies TLS mode as `SIMPLE` with SNI set to `jsonplaceholder.typicode.com`, ensuring the egress gateway originates TLS to the external service.

5. **Authorization (`authorization-policy.yaml`)**:
   - An `AuthorizationPolicy` allows traffic from the `curl-external-tst` namespace to reach the egress gateway, ensuring secure and controlled communication.

## Traffic Flow and Encryption

- **Source Sidecar Behavior**:
  - The HTTP request originates from the `curl-test` container as plain HTTP on port 80.
  - The Istio sidecar intercepts this request, applies outbound routing rules from the `VirtualService` and `ServiceEntry`, and encrypts the entire HTTP payload into a TCP stream using mTLS.
  - The encrypted stream is sent to the egress gateway over the wire.
  - **Note**: The source sidecar does not generate HTTP-specific metrics (e.g., request counts, latencies) because Envoy filters are not applied to mTLS-encrypted outbound streams. It simply forwards the encrypted TCP stream.

- **Egress Gateway Behavior**:
  - The egress gateway’s Istio proxy receives the mTLS-encrypted TCP stream, decrypts it, and reconstructs the original HTTP request.
  - Envoy filters are applied at this point, enabling HTTP metrics (e.g., request rates, response codes) to be emitted by the gateway.
  - The gateway then originates a new TLS connection to `jsonplaceholder.typicode.com` and forwards the HTTP request.

In summary:
- The source sidecar encrypts the HTTP payload as a TCP stream.
- The egress gateway decrypts, inspects, and emits HTTP metrics before forwarding the request externally.

## Optional `sidecar.yaml`

The `sidecar.yaml` file defines a `Sidecar` resource in the `curl-external-tst` namespace with the following configuration:
```yaml
spec:
  outboundTrafficPolicy:
    mode: REGISTRY_ONLY
  workloadSelector:
    labels:
      app: curl-test

================
File: serviceentry.yaml
================
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: jsonplaceholder
  namespace: curl-external-tst
spec:
  hosts:
  - jsonplaceholder.typicode.com
  ports:
  - number: 80
    name: http
    protocol: HTTP
  - number: 443
    name: https
    protocol: HTTP # HTTP internally; TLS is originated by the egress gateway
  location: MESH_EXTERNAL
  resolution: DNS

================
File: sidecar.yaml
================
apiVersion: networking.istio.io/v1beta1
kind: Sidecar
metadata:
  name: restrict-outbound-traffic
  namespace: curl-external-tst
spec:
  outboundTrafficPolicy:
    mode: REGISTRY_ONLY
  workloadSelector:
    labels:
      app: curl-test

================
File: virtualservice-egress-gw.yaml
================
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: jsonplaceholder-egress-gateway
  namespace: curl-egress-tst
spec:
  hosts:
  - jsonplaceholder.typicode.com
  gateways:
  - egress-gateway
  http:
  - route:
    - destination:
        host: jsonplaceholder.typicode.com
        port:
          number: 443

================
File: virtualservice-workload.yaml
================
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: jsonplaceholder-egress
  namespace: curl-external-tst
spec:
  hosts:
  - jsonplaceholder.typicode.com
  gateways:
  - mesh
  http:
  - match:
    - port: 80
    route:
    - destination:
        host: curl-egress-tst.curl-egress-tst.svc.cluster.local
        port:
          number: 80



================================================================
End of Codebase
================================================================
